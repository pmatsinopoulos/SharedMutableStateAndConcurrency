/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.panosmatsinopoulos.sharedmutablestateandconcurrency

import kotlinx.coroutines.*
import java.util.concurrent.atomic.AtomicInteger
import kotlin.system.measureTimeMillis

fun log(message: String) {
    println("[Thread: ${Thread.currentThread().name}] $message")
}

suspend fun massiveRun(action: () -> Unit) {
    val n = 100 // number of coroutines to launch
    val k = 1_000 // times an action is repeated by each coroutine
    val time = measureTimeMillis {
        coroutineScope { // scope for coroutines
            repeat(n) {
                launch {
                    repeat(k) {
                        action()
                    }
                }
            }
        }
    }
    log("Completed ${n * k} actions in $time ms")
}

var counter = AtomicInteger()

fun main() {
    runBlocking {
        withContext(Dispatchers.Default) {
            massiveRun { counter.incrementAndGet() }
        }
    }
    log("Counter now is $counter")
}
